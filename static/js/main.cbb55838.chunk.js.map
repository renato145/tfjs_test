{"version":3,"sources":["ImageInput.js","ImageWithHeatmap.js","useModel.js","Predictions.js","App.js","index.js"],"names":["ImageInput","className","defaultImg","setImgURL","onChangeImage","disableButtons","uploadImageRef","useRef","useState","inputURL","setInputUrl","InputGroup","FormControl","value","onChange","e","target","onClick","placeholder","aria-label","Append","Button","variant","disabled","ref","type","style","display","accept","url","URL","createObjectURL","files","current","click","ImageWithHeatmap","forwardRef","imgURL","heatmapURL","leftImage","leftImageCss","position","rightImage","Image","crossOrigin","src","classifyImage","model","img","setPredictions","setHeatmapURL","classify","then","pred","console","log","res","map","d","probability","toFixed","tensor","heatmap","x","tf","fromPixels","normalized","toFloat","mul","normalizationConstant","add","inputMin","resized","originalShape","shape","resizeBilinear","batched","reshape","execute","mean","sub","min","div","max","expandDims","slice","getHeatmap","Promise","resolve","canvas","document","createElement","toPixels","ctx","getContext","imageData","getImageData","width","height","data","i","length","includes","putImageData","toDataURL","useModel","setModel","useEffect","mobilenet","Predictions","predictions","Alert","key","exampleImage","App","imgRef","Container","undefined","Row","Col","lg","Spinner","animation","size","href","ReactDOM","render","getElementById"],"mappings":"qYA6DeA,EA1DI,SAAC,GAMb,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,cAEI,IADJC,sBACI,SACEC,EAAiBC,mBADnB,EAE4BC,mBAASN,GAFrC,mBAEGO,EAFH,KAEaC,EAFb,KAWJ,OACE,kBAACC,EAAA,EAAD,CAAYV,UAAWA,GACrB,kBAACW,EAAA,EAAD,CACEC,MAAOJ,EACPK,SAAU,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOH,QACpCI,QAAS,kBAAMP,EAAY,KAC3BQ,YAAY,YACZC,aAAW,cAEb,kBAACR,EAAA,EAAWS,OAAZ,KACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,oBACRL,QAAS,WACPd,EAAUM,GACVL,KAEFmB,SAAUlB,GANZ,mBAWF,kBAACM,EAAA,EAAWS,OAAZ,KACE,2BACEI,IAAKlB,EACLmB,KAAK,OACLC,MAAO,CAAEC,QAAS,QAClBC,OAAO,UACPd,SAlCa,SAAAC,GACnB,IAAMc,EAAMC,IAAIC,gBAAgBhB,EAAEC,OAAOgB,MAAM,IAC/C7B,EAAU0B,GACVnB,EAAYmB,GACZzB,OAgCI,kBAACiB,EAAA,EAAD,CACEC,QAAQ,oBACRL,QAAS,kBAAMX,EAAe2B,QAAQC,SACtCX,SAAUlB,GAHZ,mB,yBCzBO8B,EApBUC,sBACvB,WAAoCZ,GAApC,IAAGa,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAYrC,EAAvB,EAAuBA,UAAvB,OACEqC,EACE,kBAAC,IAAD,CACEC,UAAWF,EACXG,aAAc,CAAEC,SAAU,UAC1BC,WAAYJ,EACZrC,UAAWA,IAGb,kBAAC0C,EAAA,EAAD,CACEC,YAAY,YACZ3C,UAAWA,EACXuB,IAAKA,EACLqB,IAAKR,O,gBC8BAS,EAAgB,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,cAC1DH,EAAMI,SAASH,GAAKI,MAAK,SAAAC,GACvBC,QAAQC,IAAI,gBACZD,QAAQC,IAAIF,GACZ,IAAMG,EAAMH,EAAKI,KAAI,SAAAC,GAAC,gBAAOA,EAAEzD,UAAT,aAAuByD,EAAEC,YAAYC,QAAQ,GAA7C,QACtBX,EAAeO,GACf,IAhDoBK,EAgDdC,EA7BS,SAAC,GAAD,IAAGf,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,EAAV,OACjBC,KAAQ,WACN,IAAMhB,EAAMgB,IAAWC,WAAWF,GAC5BG,EAAalB,EAAImB,UAAUC,IAAIrB,EAAMsB,uBAAuBC,IAAIvB,EAAMwB,UACxEC,EAAUN,EACRO,EAAgBzB,EAAI0B,MAC1B,GA3Be,MA2BX1B,EAAI0B,MAAM,IA3BC,MA2BoB1B,EAAI0B,MAAM,GAAmB,CAE5DF,EAAUR,IAASW,eAAeT,EAAY,CA7BnC,UA4BU,GAGzB,IAAMU,EAAUJ,EAAQK,QAAQ,EAAE,EA/BnB,QA+B8C,IAMzDf,EAAUf,EAAMA,MAAM+B,QAAQF,EAAS,0EAA0EG,KAAK,CAAC,GAAI,IAG/H,OADAjB,GADAA,EAAUA,EAAQkB,IAAIlB,EAAQmB,QACZC,IAAIpB,EAAQqB,QACfC,YAAY,GAAGT,eAAeF,EAAcY,MAAM,EAAE,IAAI,MAUvDC,CAAW,CAAEvC,QAAOgB,EAAEf,KAhDlBa,EAiDJC,EAhDlB,IAAIyB,SAAQ,SAAAC,GACV,IAAMC,EAASC,SAASC,cAAc,UACtC3B,IAAW4B,SAAS/B,EAAQ4B,GAAQrC,MAAK,WAKvC,IAJA,IAAMyC,EAAMJ,EAAOK,WAAW,MACxBC,EAAYF,EAAIG,aAAa,EAAG,EAAGP,EAAOQ,MAAOR,EAAOS,QACxDC,EAAOJ,EAAUI,KAEdC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC1B,CAAC,EAAE,GAAGE,SAASF,EAAE,KAAKD,EAAKC,GAAK,GAChCA,EAAE,IAAM,IAAID,EAAKC,GAAK,KAG7BP,EAAIU,aAAaR,EAAW,EAAG,GAC/BP,EAAQC,EAAOe,oBAmCQpD,MAAK,SAAAvB,GAAG,OAAIqB,EAAcrB,UAiBxC4E,EAbE,WAAO,IAAD,EACOjG,qBADP,mBACbuC,EADa,KACN2D,EADM,KAUrB,OAPAC,qBAAU,WACRC,MAAiBxD,MAAK,SAAAL,GACpB2D,EAAS3D,GACTO,QAAQC,IAAI,qBAEb,IAEIR,G,QCpDM8D,EAdK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OAClB,oCACIA,GACA,kBAACC,EAAA,EAAD,CAAOzF,QAAQ,WACb,4BACGwF,EAAYrD,KAAI,SAACC,EAAG0C,GAAJ,OACf,wBAAIY,IAAKZ,GAAI1C,UCAnBuD,G,MACJ,6FA6EaC,EA3EH,WACV,IAAMC,EAAS5G,mBADC,EAEYC,mBAASyG,GAFrB,mBAET5E,EAFS,KAEDlC,EAFC,OAGoBK,qBAHpB,mBAGT8B,EAHS,KAGGY,EAHH,OAIsB1C,qBAJtB,mBAITsG,EAJS,KAII7D,EAJJ,KAKVF,EAAQ0D,IAEd,OACE,kBAACW,EAAA,EAAD,KACE,gCACE,wBAAInH,UAAU,aAAd,cAGF,8BACE,kBAAC,EAAD,CACEA,UAAU,OACVC,WAAY+G,EACZ5E,OAAQA,EACRlC,UAAWA,EACXC,cAAe,WACb8C,OAAcmE,GACdpE,OAAeoE,IAEjBhH,gBAAiB0C,IAEnB,kBAACuE,EAAA,EAAD,CAAKrH,UAAU,0BACb,kBAACsH,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,CACEvH,UAAU,aACVoC,OAAQA,EACRC,WAAYA,EACZd,IAAK2F,KAEL7E,GACA,yBAAKrC,UAAU,aACb,kBAACoB,EAAA,EAAD,CACEC,QAAQ,oBACRL,QAAS,kBACP6B,EAAc,CACZC,QACAC,IAAKmE,EAAOlF,QACZgB,iBACAC,mBAGJ3B,UAAWwB,GAEVA,EACC,iBAEA,wDACmB,kBAAC0E,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAM5D,kBAAC,EAAD,CAAab,YAAaA,OAKhC,gCACE,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKtH,UAAU,mBACb,uBAAG2H,KAAK,yCAAyC5G,OAAO,UAAxD,oBCzEZ6G,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,W","file":"static/js/main.cbb55838.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\n\nconst ImageInput = ({\n  className,\n  defaultImg,\n  setImgURL,\n  onChangeImage,\n  disableButtons = false,\n}) => {\n  const uploadImageRef = useRef();\n  const [inputURL, setInputUrl] = useState(defaultImg);\n\n  const handleUpload = e => {\n    const url = URL.createObjectURL(e.target.files[0]);\n    setImgURL(url);\n    setInputUrl(url);\n    onChangeImage();\n  };\n\n  return (\n    <InputGroup className={className}>\n      <FormControl\n        value={inputURL}\n        onChange={e => setInputUrl(e.target.value)}\n        onClick={() => setInputUrl('')}\n        placeholder=\"Image url\"\n        aria-label=\"Image url\"\n      />\n      <InputGroup.Append>\n        <Button\n          variant=\"outline-secondary\"\n          onClick={() => {\n            setImgURL(inputURL);\n            onChangeImage();\n          }}\n          disabled={disableButtons}\n        >\n          Load image url\n        </Button>\n      </InputGroup.Append>\n      <InputGroup.Append>\n        <input\n          ref={uploadImageRef}\n          type=\"file\"\n          style={{ display: 'none' }}\n          accept=\"image/*\"\n          onChange={handleUpload}\n        />\n        <Button\n          variant=\"outline-secondary\"\n          onClick={() => uploadImageRef.current.click()}\n          disabled={disableButtons}\n        >\n          Upload image\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n};\n\nexport default ImageInput;\n","import React, { forwardRef } from 'react';\nimport ReactCompareImage from 'react-compare-image';\nimport { Image } from 'react-bootstrap';\n\nconst ImageWithHeatmap = forwardRef(\n  ({ imgURL, heatmapURL, className }, ref) => ( \n    heatmapURL ? (\n      <ReactCompareImage\n        leftImage={imgURL}\n        leftImageCss={{ position: 'static' }}\n        rightImage={heatmapURL}\n        className={className}\n      />\n    ) : (\n      <Image\n        crossOrigin=\"anonymous\"\n        className={className}\n        ref={ref}\n        src={imgURL}\n      />\n    )\n  )\n);\n\nexport default ImageWithHeatmap;\n","import * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs';\nimport { useEffect, useState } from 'react';\n\nconst IMAGE_SIZE = 224;\n\nconst tensorToDataURL = tensor => ( \n  new Promise(resolve => { \n    const canvas = document.createElement('canvas');\n    tf.browser.toPixels(tensor, canvas).then(() => {\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n      const data = imageData.data;\n\n      for (let i = 0; i < data.length; i++) {\n        if ( [1,2].includes(i%4) ) data[i] = 0;\n        if ( i%4 === 3 ) data[i] = 127;\n      }\n\n      ctx.putImageData(imageData, 0, 0);\n      resolve(canvas.toDataURL());\n    });\n  })\n );\n\nconst getHeatmap = ({ model, x }) => ( \n  tf.tidy(() => {\n    const img = tf.browser.fromPixels(x);\n    const normalized = img.toFloat().mul(model.normalizationConstant).add(model.inputMin);\n    let resized = normalized;\n    const originalShape = img.shape;\n    if (img.shape[0] !== IMAGE_SIZE || img.shape[1] !== IMAGE_SIZE) {\n        const alignCorners = true;\n        resized = tf.image.resizeBilinear(normalized, [IMAGE_SIZE, IMAGE_SIZE], alignCorners);\n    }\n    const batched = resized.reshape([-1, IMAGE_SIZE, IMAGE_SIZE, 3]);\n    // See layers:\n    // model.model.artifacts.modelTopology.node.filter(d => d.name.includes('pointwise/Relu6')).forEach(({ name }) => {\n    //   const shape = model.model.execute(batched, name).shape;\n    //   console.log(`${name}: ${shape}`);\n    // });\n    let heatmap = model.model.execute(batched, 'module_apply_default/MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6').mean([0, -1]);\n    heatmap = heatmap.sub(heatmap.min())\n    heatmap = heatmap.div(heatmap.max())\n    return heatmap.expandDims(-1).resizeBilinear(originalShape.slice(0,2), true);\n  })\n);\n\nexport const classifyImage = ({ model, img, setPredictions, setHeatmapURL }) => {\n  model.classify(img).then(pred => {\n    console.log('Predictions:');\n    console.log(pred);\n    const res = pred.map(d => `${d.className} (${d.probability.toFixed(2)})`);\n    setPredictions(res);\n    const heatmap = getHeatmap({ model, x:img });\n    tensorToDataURL(heatmap).then(url => setHeatmapURL(url));\n  });\n};\n\nconst useModel = () => {  \n  const [ model, setModel ] = useState();\n\n  useEffect(() => {\n    mobilenet.load().then(model => {\n      setModel(model);\n      console.log('model loaded');\n    });\n  }, []);\n\n  return model;\n  };\n\nexport default useModel;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Predictions = ({ predictions }) => ( \n  <>\n    { predictions && (\n      <Alert variant=\"primary\">\n        <ol>\n          {predictions.map((d, i) => (\n            <li key={i}>{d}</li>\n          ))}\n        </ol>\n      </Alert>\n    )}\n  </>\n );\n\nexport default Predictions;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React, { useState, useRef } from 'react';\nimport { Container, Row, Col, Button, Spinner } from 'react-bootstrap';\nimport ImageInput from './ImageInput';\nimport ImageWithHeatmap from './ImageWithHeatmap';\nimport useModel, { classifyImage } from './useModel';\nimport Predictions from './Predictions';\nimport './App.css';\n\nconst exampleImage =\n  'https://cdn.glitch.com/5bf7c54b-c36f-4009-a191-186909fb788e%2Fcat_flickr_publicdomain.jpg';\n\nconst App = () => {\n  const imgRef = useRef();\n  const [imgURL, setImgURL] = useState(exampleImage);\n  const [heatmapURL, setHeatmapURL] = useState();\n  const [predictions, setPredictions] = useState();\n  const model = useModel();\n\n  return (\n    <Container>\n      <header>\n        <h1 className=\"mt-4 mb-4\">tfjs test</h1>\n      </header>\n\n      <main>\n        <ImageInput\n          className=\"mb-3\"\n          defaultImg={exampleImage}\n          imgURL={imgURL}\n          setImgURL={setImgURL}\n          onChangeImage={() => {\n            setHeatmapURL(undefined);\n            setPredictions(undefined);\n          }}\n          disableButtons={!model}\n        />\n        <Row className=\"justify-content-center\">\n          <Col lg={9}>\n            <ImageWithHeatmap\n              className=\"w-100 mb-2\"\n              imgURL={imgURL}\n              heatmapURL={heatmapURL}\n              ref={imgRef}\n            />\n            {!heatmapURL && (\n              <div className=\"mb-2 ml-2\">\n                <Button\n                  variant=\"outline-secondary\"\n                  onClick={() =>\n                    classifyImage({\n                      model,\n                      img: imgRef.current,\n                      setPredictions,\n                      setHeatmapURL,\n                    })\n                  }\n                  disabled={!model}\n                >\n                  {model ? (\n                    'Classify this!'\n                  ) : (\n                    <>\n                      Loading model... <Spinner animation=\"border\" size=\"sm\" />\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n            <Predictions predictions={predictions} />\n          </Col>\n        </Row>\n      </main>\n\n      <footer>\n        <Row>\n          <Col className=\"mt-4 text-right\">\n            <a href=\"https://github.com/renato145/tfjs_test\" target=\"_black\">\n              Source code\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}