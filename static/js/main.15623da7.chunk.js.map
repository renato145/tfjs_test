{"version":3,"sources":["App.js","index.js"],"names":["exampleImage","App","imgRef","useRef","uploadImageRef","useState","imgUrl","setImgUrl","imgCurrent","setImgCurrent","model","setModel","predictions","setPredictions","useEffect","mobilenet","then","console","log","Container","className","InputGroup","FormControl","value","onChange","e","target","onClick","onBlur","placeholder","aria-label","Append","Button","variant","disabled","ref","type","style","display","accept","url","URL","createObjectURL","files","current","click","Row","Col","md","Image","crossOrigin","src","classify","pred","res","map","d","probability","toFixed","Spinner","animation","size","Alert","i","key","href","ReactDOM","render","document","getElementById"],"mappings":"4WAgBMA,EACJ,4FAoIaC,EAlIH,WACV,IAAMC,EAASC,mBACTC,EAAiBD,mBAFP,EAGYE,mBAASL,GAHrB,mBAGTM,EAHS,KAGDC,EAHC,OAIoBF,mBAASL,GAJ7B,mBAITQ,EAJS,KAIGC,EAJH,OAKUJ,qBALV,mBAKTK,EALS,KAKFC,EALE,OAMsBN,qBANtB,mBAMTO,EANS,KAMIC,EANJ,KAQhBC,qBAAU,WACRC,MAAiBC,MAAK,SAAAN,GACpBC,EAASD,GACTO,QAAQC,IAAI,qBAEb,IAEHJ,qBAAU,WACRD,EAAe,MACd,CAACL,IAqBJ,OACE,kBAACW,EAAA,EAAD,KACE,gCACE,wBAAIC,UAAU,aAAd,cAGF,8BACE,kBAACC,EAAA,EAAD,CAAYD,UAAU,QACpB,kBAACE,EAAA,EAAD,CACEC,MAAOjB,EACPkB,SAAU,SAAAC,GAAC,OAAIlB,EAAUkB,EAAEC,OAAOH,QAClCI,QAAS,kBAAMpB,EAAU,KACzBqB,OAAQ,kBAAMrB,EAAUC,IACxBqB,YAAY,YACZC,aAAW,cAEb,kBAACT,EAAA,EAAWU,OAAZ,KACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,oBACRN,QAtCM,WAChBlB,EAAcH,IAsCJ4B,UAAWxB,GAHb,mBAQF,kBAACW,EAAA,EAAWU,OAAZ,KACE,2BACEI,IAAK/B,EACLgC,KAAK,OACLC,MAAO,CAAEC,QAAS,QAClBC,OAAO,UACPf,SA9CQ,SAAAC,GAClB,IAAMe,EAAMC,IAAIC,gBAAgBjB,EAAEC,OAAOiB,MAAM,IAC/ClC,EAAc+B,GACdjC,EAAUiC,MA6CF,kBAACR,EAAA,EAAD,CACEC,QAAQ,oBACRN,QAAS,kBAAMvB,EAAewC,QAAQC,SACtCX,UAAWxB,GAHb,kBASJ,kBAACoC,EAAA,EAAD,CAAK1B,UAAU,0BACb,kBAAC2B,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CACEC,YAAY,YACZ9B,UAAU,aACVe,IAAKjC,EACLiD,IAAK3C,IAEP,yBAAKY,UAAU,aACb,kBAACY,EAAA,EAAD,CACEC,QAAQ,oBACRN,QA9DQ,WACpBjB,EAAM0C,SAASlD,EAAO0C,SAAS5B,MAAK,SAAAqC,GAClCpC,QAAQC,IAAI,gBACZD,QAAQC,IAAImC,GACZ,IAAMC,EAAMD,EAAKE,KAAI,SAAAC,GAAC,gBAAOA,EAAEpC,UAAT,aAAuBoC,EAAEC,YAAYC,QAAQ,GAA7C,QACtB7C,EAAeyC,OA0DLpB,UAAWxB,GAEVA,EACC,iBAEA,wDACmB,kBAACiD,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAKzDjD,GACC,kBAACkD,EAAA,EAAD,CAAO7B,QAAQ,WACb,4BACGrB,EAAY2C,KAAI,SAACC,EAAGO,GAAJ,OACf,wBAAIC,IAAKD,GAAIP,UAOzB,yBAAKpC,UAAU,yBAGjB,gCACE,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK3B,UAAU,mBACb,uBAAG6C,KAAK,yCAAyCvC,OAAO,UAAxD,oBCvIZwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.15623da7.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport './App.css';\nimport {\n  Container,\n  InputGroup,\n  FormControl,\n  Button,\n  Image,\n  Alert,\n  Col,\n  Row,\n  Spinner,\n} from 'react-bootstrap';\n\nconst exampleImage =\n  'https://cdn.glitch.com/5bf7c54b-c36f-4009-a191-186909fb788e%2Fcat_flickr_publicdomain.jpg';\n\nconst App = () => {\n  const imgRef = useRef();\n  const uploadImageRef = useRef();\n  const [imgUrl, setImgUrl] = useState(exampleImage);\n  const [imgCurrent, setImgCurrent] = useState(exampleImage);\n  const [model, setModel] = useState();\n  const [predictions, setPredictions] = useState();\n\n  useEffect(() => {\n    mobilenet.load().then(model => {\n      setModel(model);\n      console.log('model loaded');\n    });\n  }, []);\n\n  useEffect(() => {\n    setPredictions('');\n  }, [imgCurrent]);\n\n  const loadImage = () => {\n    setImgCurrent(imgUrl);\n  };\n\n  const uploadImage = e => {\n    const url = URL.createObjectURL(e.target.files[0]);\n    setImgCurrent(url);\n    setImgUrl(url);\n  };\n\n  const classifyImage = () => {\n    model.classify(imgRef.current).then(pred => {\n      console.log('Predictions:');\n      console.log(pred);\n      const res = pred.map(d => `${d.className} (${d.probability.toFixed(2)})`);\n      setPredictions(res);\n    });\n  };\n\n  return (\n    <Container>\n      <header>\n        <h1 className=\"mt-4 mb-4\">tfjs test</h1>\n      </header>\n\n      <main>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            value={imgUrl}\n            onChange={e => setImgUrl(e.target.value)}\n            onClick={() => setImgUrl('')}\n            onBlur={() => setImgUrl(imgCurrent)}\n            placeholder=\"Image url\"\n            aria-label=\"Image url\"\n          />\n          <InputGroup.Append>\n            <Button\n              variant=\"outline-secondary\"\n              onClick={loadImage}\n              disabled={!model}\n            >\n              Load image url\n            </Button>\n          </InputGroup.Append>\n          <InputGroup.Append>\n            <input\n              ref={uploadImageRef}\n              type=\"file\"\n              style={{ display: 'none' }}\n              accept=\"image/*\"\n              onChange={uploadImage}\n            />\n            <Button\n              variant=\"outline-secondary\"\n              onClick={() => uploadImageRef.current.click()}\n              disabled={!model}\n            >\n              Upload image\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n        <Row className=\"justify-content-center\">\n          <Col md={8}>\n            <Image\n              crossOrigin=\"anonymous\"\n              className=\"w-100 mb-2\"\n              ref={imgRef}\n              src={imgCurrent}\n            />\n            <div className=\"mb-2 ml-2\">\n              <Button\n                variant=\"outline-secondary\"\n                onClick={classifyImage}\n                disabled={!model}\n              >\n                {model ? (\n                  'Classify this!'\n                ) : (\n                  <>\n                    Loading model... <Spinner animation=\"border\" size=\"sm\" />\n                  </>\n                )}\n              </Button>\n            </div>\n            {predictions && (\n              <Alert variant=\"primary\">\n                <ol>\n                  {predictions.map((d, i) => (\n                    <li key={i}>{d}</li>\n                  ))}\n                </ol>\n              </Alert>\n            )}\n          </Col>\n        </Row>\n        <div className=\"justify-content-end\"></div>\n      </main>\n\n      <footer>\n        <Row>\n          <Col className=\"mt-4 text-right\">\n            <a href=\"https://github.com/renato145/tfjs_test\" target=\"_black\">\n              Source code\n            </a>\n          </Col>\n        </Row>\n      </footer>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}