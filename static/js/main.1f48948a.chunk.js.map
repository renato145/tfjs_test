{"version":3,"sources":["ImageInput.js","ImageWithHeatmap.js","useModel.js","Predictions.js","SelectHeatmap.js","Footer.js","App.js","index.js"],"names":["ImageInput","className","defaultImg","imgURL","setImgURL","onChangeImage","disableButtons","uploadImageRef","useRef","useState","inputURL","setInputUrl","InputGroup","FormControl","value","onChange","e","target","onClick","onBlur","placeholder","aria-label","Append","Button","variant","disabled","ref","type","style","display","accept","url","URL","createObjectURL","files","current","click","ImageWithHeatmap","forwardRef","heatmapURL","Image","crossOrigin","src","leftImage","leftImageCss","position","rightImage","ALPHA","parseInt","useModel","model","setModel","useEffect","mobilenet","then","console","log","Predictions","predictions","children","Alert","map","d","i","key","SelectHeatmap","heatmapLayers","showLayers","useMemo","re","exec","Row","Col","Footer","mail","width","color","paddingLeft","marginBottom","fontSize","href","Nav","Item","Link","exampleImage","App","imgRef","setHeatmapURL","setPredictions","layer","setLayer","artifacts","modelTopology","node","filter","name","includes","getHeatmapLayers","updateHeatmap","useCallback","tensor","heatmap","x","layerName","tf","img","fromPixels","normalized","toFloat","mul","normalizationConstant","add","inputMin","resized","originalShape","shape","resizeBilinear","batched","reshape","execute","mean","sub","min","div","max","expandDims","slice","getHeatmap","Promise","resolve","canvas","document","createElement","toPixels","ctx","getContext","imageData","getImageData","height","data","length","idx","colorValue","interpolateMagma","r","g","b","putImageData","toDataURL","Container","undefined","lg","classify","pred","res","probability","toFixed","classifyImage","Spinner","animation","size","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1f48948a.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\n\nconst ImageInput = ({\n  className,\n  defaultImg,\n  imgURL,\n  setImgURL,\n  onChangeImage,\n  disableButtons = false,\n}) => {\n  const uploadImageRef = useRef();\n  const [inputURL, setInputUrl] = useState(defaultImg);\n\n  const handleUpload = e => {\n    const url = URL.createObjectURL(e.target.files[0]);\n    setImgURL(url);\n    setInputUrl(url);\n    onChangeImage();\n  };\n\n  return (\n    <InputGroup className={className}>\n      <FormControl\n        value={inputURL}\n        onChange={e => setInputUrl(e.target.value)}\n        onClick={() => setInputUrl('')}\n        onBlur={() => setInputUrl(imgURL)}\n        placeholder=\"Image url\"\n        aria-label=\"Image url\"\n      />\n      <InputGroup.Append>\n        <Button\n          variant=\"outline-secondary\"\n          onClick={() => {\n            setImgURL(inputURL);\n            onChangeImage();\n          }}\n          disabled={disableButtons}\n        >\n          Load image url\n        </Button>\n      </InputGroup.Append>\n      <InputGroup.Append>\n        <input\n          ref={uploadImageRef}\n          type=\"file\"\n          style={{ display: 'none' }}\n          accept=\"image/*\"\n          onChange={handleUpload}\n        />\n        <Button\n          variant=\"outline-secondary\"\n          onClick={() => uploadImageRef.current.click()}\n          disabled={disableButtons}\n        >\n          Upload image\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  );\n};\n\nexport default ImageInput;\n","import React, { forwardRef } from 'react';\nimport ReactCompareImage from 'react-compare-image';\nimport { Image } from 'react-bootstrap';\n\nconst ImageWithHeatmap = forwardRef(\n  ({ imgURL, heatmapURL, className }, ref) => ( \n    <>\n      <Image\n        crossOrigin=\"anonymous\"\n        className={className}\n        style={{display: heatmapURL ? 'none' : 'inherit'}}\n        ref={ref}\n        src={imgURL}\n      />\n      { heatmapURL && (\n        <ReactCompareImage\n          leftImage={imgURL}\n          leftImageCss={{ position: 'static' }}\n          rightImage={heatmapURL}\n          className={className}\n        />\n      )}\n    </>\n  )\n);\n\nexport default ImageWithHeatmap;\n","import * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs';\nimport { useEffect, useState } from 'react';\nimport { interpolateMagma, color } from 'd3';\n\nconst IMAGE_SIZE = 224;\nconst ALPHA = parseInt(255 * 0.75);\n\nexport const tensorToDataURL = tensor =>\n  new Promise(resolve => {\n    const canvas = document.createElement('canvas');\n    tf.browser.toPixels(tensor, canvas).then(() => {\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const data = imageData.data;\n\n      for (let i = 0; i < data.length/4; i++) {\n        const idx = i*4;\n        const colorValue = color(interpolateMagma(data[idx]/255));\n        data[idx] = colorValue.r;\n        data[idx+1] = colorValue.g;\n        data[idx+2] = colorValue.b;\n        data[idx+3] = ALPHA;\n      }\n\n      ctx.putImageData(imageData, 0, 0);\n      resolve(canvas.toDataURL());\n    });\n  });\n\n// view layer and shape:\n//  const shape = model.model.execute(batched, name).shape;\n//  console.log(`${name}: ${shape}`);\nexport const getHeatmapLayers = model =>\n  model.model.artifacts.modelTopology.node\n    .filter(d => d.name.includes('pointwise/Relu6'))\n    .map(d => d.name);\n\nexport const getHeatmap = ({ model, x, layerName }) =>\n  tf.tidy(() => {\n    const img = tf.browser.fromPixels(x);\n    const normalized = img\n      .toFloat()\n      .mul(model.normalizationConstant)\n      .add(model.inputMin);\n    let resized = normalized;\n    const originalShape = img.shape;\n    if (img.shape[0] !== IMAGE_SIZE || img.shape[1] !== IMAGE_SIZE) {\n      const alignCorners = true;\n      resized = tf.image.resizeBilinear(\n        normalized,\n        [IMAGE_SIZE, IMAGE_SIZE],\n        alignCorners\n      );\n    }\n    const batched = resized.reshape([-1, IMAGE_SIZE, IMAGE_SIZE, 3]);\n    let heatmap = model.model.execute(batched, layerName).mean([0, -1]);\n    heatmap = heatmap.sub(heatmap.min());\n    heatmap = heatmap.div(heatmap.max());\n    return heatmap\n      .expandDims(-1)\n      .resizeBilinear(originalShape.slice(0, 2), true);\n  });\n\nexport const classifyImage = ({ model, img, setPredictions }) => {\n  model.classify(img).then(pred => {\n    console.log('Predictions:');\n    console.log(pred);\n    const res = pred.map(d => `${d.className} (${d.probability.toFixed(2)})`);\n    setPredictions(res);\n  });\n};\n\nconst useModel = () => {\n  const [model, setModel] = useState();\n\n  useEffect(() => {\n    mobilenet.load().then(model => {\n      setModel(model);\n      console.log('model loaded');\n    });\n  }, []);\n\n  return model;\n};\n\nexport default useModel;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Predictions = ({ predictions, children }) => ( \n  <>\n    { predictions && (\n      <Alert variant=\"primary\">\n        <ol>\n          {predictions.map((d, i) => (\n            <li key={i}>{d}</li>\n          ))}\n        </ol>\n        {children}\n      </Alert>\n    )}\n  </>\n );\n\nexport default Predictions;\n","import React, { useMemo } from 'react';\nimport './SelectHeatmap.css';\nimport { Col, Row } from 'react-bootstrap';\n\nconst SelectHeatmap = ({ heatmapLayers, onChange }) => {\n  const showLayers = useMemo(() => {\n    const re = /.*MobilenetV1\\/(.*)\\/Relu6/;\n    return heatmapLayers.map(d => re.exec(d)[1])\n  }, [ heatmapLayers ]);\n\n  if (!heatmapLayers) return;\n  return (\n    <Row className=\"justify-content-start\">\n      <Col className='col-auto'>\n        <label className='selection-label mb-0 ml-2'>Select heatmap layer</label>\n        <select className='custom-select' onChange={e => onChange(+e.target.value)}>\n          {showLayers.map((d, i) => (\n            <option key={i} value={i}>\n              {d}\n            </option>\n          ))}\n        </select>\n      </Col>\n    </Row>\n  );\n};\n\nexport default SelectHeatmap;\n","import React from 'react';\nimport { Nav } from 'react-bootstrap';\n\nexport const Footer = ({ url }) => {\n  const mail = 'renato.hermoza@pucp.edu.pe';\n  const social = 'renato145';\n\n  return (\n    <footer style={{ width: '100%' }} className=\"mt-5\">\n      <p style={{ color: '#6c757d', paddingLeft: '1rem', marginBottom: '0rem', fontSize: '0.9rem' }}>\n        Made by: Renato Hermoza, check the{' '}\n        <a href={`https://github.com/renato145/${url}`} target=\"_black\">\n          source code\n        </a>\n        .\n      </p>\n      <hr className=\"mt-2\" />\n      <Nav className=\"justify-content-center\">\n        <Nav.Item>\n          <Nav.Link href={`mailto:${mail}`}>{mail}</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link href={`https://twitter.com/${social}`} target=\"_black\">\n            Twitter\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link href={`https://github.com/${social}`} target=\"_black\">\n            GitHub\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link href={`https://${social}.github.io`} target=\"_black\">\n            Blog\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n    </footer>\n  );\n};\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React, { useState, useRef, useMemo, useCallback } from 'react';\nimport { Container, Row, Col, Button, Spinner } from 'react-bootstrap';\nimport ImageInput from './ImageInput';\nimport ImageWithHeatmap from './ImageWithHeatmap';\nimport useModel, {\n  classifyImage,\n  getHeatmapLayers,\n  getHeatmap,\n  tensorToDataURL,\n} from './useModel';\nimport Predictions from './Predictions';\nimport SelectHeatmap from './SelectHeatmap';\nimport { Footer } from './Footer';\nimport './App.css';\n\nconst exampleImage =\n  'https://cdn.glitch.com/5bf7c54b-c36f-4009-a191-186909fb788e%2Fcat_flickr_publicdomain.jpg';\n\nconst App = () => {\n  const imgRef = useRef();\n  const [imgURL, setImgURL] = useState(exampleImage);\n  const [heatmapURL, setHeatmapURL] = useState();\n  const [predictions, setPredictions] = useState();\n  const [layer, setLayer] = useState(0);\n  const model = useModel();\n\n  const heatmapLayers = useMemo(() => {\n    if (!model) return;\n    return getHeatmapLayers(model);\n  }, [model]);\n\n  const updateHeatmap = useCallback(\n    (layer) => {\n      if (!heatmapLayers) return;\n      const heatmap = getHeatmap({\n        model,\n        x: imgRef.current,\n        layerName: heatmapLayers[layer],\n      });\n      tensorToDataURL(heatmap).then(setHeatmapURL);\n    },\n    [heatmapLayers, model]\n  );\n\n  return (\n    <Container>\n      <header>\n        <h1 className=\"mt-4 mb-4\">tfjs test</h1>\n      </header>\n\n      <main>\n        <ImageInput\n          className=\"mb-3\"\n          defaultImg={exampleImage}\n          imgURL={imgURL}\n          setImgURL={setImgURL}\n          onChangeImage={() => {\n            setHeatmapURL(undefined);\n            setPredictions(undefined);\n          }}\n          disableButtons={!model}\n        />\n        <Row className=\"justify-content-center\">\n          <Col lg={9}>\n            <ImageWithHeatmap\n              className=\"w-100 mb-2\"\n              imgURL={imgURL}\n              heatmapURL={heatmapURL}\n              ref={imgRef}\n            />\n            {!heatmapURL && (\n              <>\n                <div className=\"mb-2 ml-2\">\n                  <Button\n                    variant=\"outline-secondary\"\n                    onClick={() => {\n                      classifyImage({\n                        model,\n                        img: imgRef.current,\n                        setPredictions,\n                      });\n                      updateHeatmap(layer);\n                    }}\n                    disabled={!model}\n                  >\n                    {model ? (\n                      'Classify this!'\n                    ) : (\n                      <>\n                        Loading model...{' '}\n                        <Spinner animation=\"border\" size=\"sm\" />\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </>\n            )}\n            <Predictions predictions={predictions}>\n              <SelectHeatmap\n                heatmapLayers={heatmapLayers}\n                onChange={(d) => {\n                  updateHeatmap(d);\n                  setLayer(d);\n                }}\n              />\n            </Predictions>\n          </Col>\n        </Row>\n      </main>\n\n      <Footer url=\"tfjs_test\" />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}